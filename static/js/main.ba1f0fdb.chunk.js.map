{"version":3,"sources":["Component/Article.js","Page/About/About.js","App.js","serviceWorker.js","index.js"],"names":["Article","props","children","About","className","target","href","App","onMouseMove","e","cursor","document","querySelector","style","left","screenX","top","screenY","window","scrollY","id","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAWeA,EATC,SAACC,GAEb,OACI,6BACKA,EAAMC,WCwBJC,EA3BD,SAACF,GAAD,OACV,6BACI,kBAAC,EAAD,KACI,uHACA,+BAAI,iFAAJ,KACA,8MAGA,iGAAsE,uBAAGG,UAAU,OAAOC,OAAO,SAASC,KAAK,kDAAzC,qBAAtE,wFAGA,4OAIA,0IAGA,6BACA,wDAA6B,uBAAGF,UAAU,OAAOE,KAAK,aAAzB,OAA7B,0CAAgH,uBAAGF,UAAU,OAAOE,KAAK,QAAzB,sCAAhH,aAAgM,uBAAGF,UAAU,OAAOE,KAAK,OAAzB,qBAAhM,YACW,uBAAGF,UAAU,OAAOE,KAAK,QAAzB,+BADX,QAC+E,uBAAGF,UAAU,OAAOE,KAAK,cAAzB,2BAD/E,uDCgDGC,G,YApDH,SAACN,GAkBX,OACE,yBAAKG,UAAU,uBAAuBI,YAjBb,SAACC,GAC1B,IAAIC,EAASC,SAASC,cAAc,WACpCF,EAAOG,MAAMC,KAAOL,EAAEM,QAAU,KAChCL,EAAOG,MAAMG,IAAOP,EAAEQ,QAAU,IAAMC,OAAOC,QAAW,OAetD,yBAAKf,UAAU,SAASgB,GAAG,UAA3B,MACA,kBAAC,IAAD,KACE,yBAAKhB,UAAU,gBAIb,yBAAKA,UAAU,yBACb,kBAAC,EAAD,YCjCQiB,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ba1f0fdb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Article = (props) => {\n\n    return (\n        <div>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Article;","import React from 'react';\nimport Article from '../../Component/Article';\n\nconst About = (props) => (\n    <div>\n        <Article>\n            <p> [Notice: Rabbit holes are not connected yet. This cabinet is still under development.] </p>\n            <p> <b> This is a cabinet of various shapes of thoughts. </b> </p>\n            <p> These are the thoughts that were picked up accidentally throughout my daily life. They are like cobblestones, \n                which I hope would pave the road of mine or even someone else's.\n            </p>\n            <p> Ever since I was small, I love to open a wiki page and follow the <a className=\"link\" target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Wiki_rabbit_hole\"> wiki rabbit hole</a>. \n                This is the primary way of me exploring the world around me and feed my curiosity. \n            </p>\n            <p>\n                I want to provide my readers a similar experience, and thus I decide to build this cabinet full of \"portals\"(the greyish hyperlink) connected \n                to various other thoughts of mine and also external references. \n            </p>\n            <p>\n                Now, welcome, have fun hopping into different rabbit holes and picking up a few cobblestones along the way.\n            </p>\n            <br />\n            <p> A little something about <a className=\"link\" href=\"/jialinwu\"> me</a>. My name is Alex, a Junior student at <a className=\"link\" href=\"/ucb\">University of California, Berkeley</a> studying <a className=\"link\" href=\"/cs\"> Computer Science</a>.\n                I love <a className=\"link\" href=\"/hci\"> human-computer interaction</a> and <a className=\"link\" href=\"/fullstack\"> full stack development</a>. \n                I play chess and hearthstone in my spare time.\n            </p>\n        </Article>\n    </div>\n)\n\nexport default About;","import React, { useState, useEffect } from 'react';\nimport Sidebar from './Component/Sidebar'\nimport Body from './Component/Thumbnail'\n\nimport About from './Page/About/About'\nimport Attribute from './Page/Attribute/Attribute'\nimport Culture from './Page/Culture'\nimport Craft from './Page/Craft/Craft'\nimport Knowledge from './Page/Knowledge'\n\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n  \nconst App = (props) => {\n  \n  const trackMouseMovement = (e) => {\n    let cursor = document.querySelector('#cursor');\n    cursor.style.left = e.screenX + \"px\";\n    cursor.style.top = (e.screenY - 102 + window.scrollY) + \"px\";\n  }\n\n  // // Trying to make cursor transition smoother while scrolling, but failed.\n  // useEffect(() => {\n  //   window.addEventListener('scroll', (event) => {\n  //     let cursor = document.querySelector('#cursor');\n  //     console.log(\"original:\", cursor.style.top)\n  //     console.log(parseInt(cursor.style.top.slice(0, -2)) + window.scrollY)\n  //     cursor.style.top = (parseInt(cursor.style.top.slice(0, -2)) + window.scrollY) + \"px\";\n  //   });\n  // }, [])\n\n  return (\n    <div className=\"App__mouseplayground\" onMouseMove={trackMouseMovement}>\n      <div className=\"cursor\" id=\"cursor\">  </div>\n      <Router>\n        <div className=\"App__wrapper\">\n          {/* <div className=\"App__container__left\">\n            <Sidebar />\n          </div> */}\n          <div className=\"App__container__right\">\n            <About />\n            {/* <Switch>\n              <Route exact path=\"/\">\n                <About />\n              </Route>\n              <Route path=\"/craft\">\n                <Craft />\n              </Route>\n              <Route path=\"/culture\">\n                <Culture />\n              </Route>\n              <Route path=\"/knowledge\">\n                <Knowledge />\n              </Route>\n              <Route path=\"/attribute\">\n                <Attribute />\n              </Route>\n            </Switch> */}\n          </div>\n        </div>\n      </Router>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}